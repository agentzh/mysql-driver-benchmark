#!/usr/bin/env perl

use strict;
use warnings;

my $work_dir = shift or
    die "no working directory specified";

if (!-d $work_dir) {
    die "working directory $work_dir not found";
}

my $main_log_file = shift or
    die "no main log file specified";

open my $main, $main_log_file or
    die "failed to open $main_log_file for reading: $!\n";

my @records;
my $record;
my $expect;
while (<$main>) {
    if (/^===$/) {
        $expect = 'time';
        $record = { line => $. };
        push @records, $record;
        last;
    }
}

if (!$record) {
    die "No log data found";
}

while (<$main>) {
    if (/^===$/) {
        if ($record) {
            my $ln = $record->{line};
            if (!$ln) {
                die "$.: no line found";
            }

            if (!$record->{BEGIN}) {
                die "line $ln: BEGIN time not found";
            }

            if (!$record->{END}) {
                die "line $ln: END time not found";
            }

            if (!$record->{con}) {
                die "line $ln: concurrency not found";
            }

            if (!defined $record->{failed}) {
                die "line $ln: failed requests not found";
            }

            if (!defined $record->{rps}) {
                die "line $ln: rps not found";
            }

            if (!defined $record->{total_time}) {
                die "line $ln: total time not found";
            }

            if (!defined $record->{total_reqs}) {
                die "line $ln: total requests not found";
            }

            if (!defined $record->{throughput}) {
                die "line $ln: throughput not found";
            }
        }

        $record = { line => $. };
        push @records, $record;
        next;
    }

    if (/^(BEGIN|END) (\d{4}-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}))$/) {
        my ($type, $time, $month, $day, $h, $m, $s) = ($1, $2, $3, $4, $5, $6, $7);

        if ($record->{$type}) {
            die "duplicate $type timestamp: $.";
        }

        my $tm = {};
        $record->{$type} = $tm;

        my $suffix = "$month$day-$h$m";
        $tm->{suffix} = $suffix;
        #warn "type $type, suffix $suffix, time $time, sec $s\n";

        $tm->{sec} = $s;
        $tm->{time} = $time;
        next;
    }

    if (/^spawning thread \#\d+: (\d+) concurrent requests/) {
        my ($con) = $1;
        $record->{con} += $con;
        #warn "found concurrency: $con\n";
        next;
    }

    if (/^finished in (\d+) sec, (\d+) millisec and (\d+) microsec, (\d+) req\/s, (\d+) kbyte\/s$/) {
        my ($sec, $millisec, $microsec, $rps, $throughput) = ($1, $2, $3, $4, $5);

        my $total_time = $sec * 1000 + $millisec + $microsec/1000;

        $record->{rps} = $rps;
        $record->{throughput} = $throughput;
        $record->{total_time} = $total_time;

        #warn "rps: $rps, throughput: $throughput\n";
        next;
    }

    if (/^requests: (\d+) total, .*?, (\d+) failed, (\d+) errored$/) {
        my $total = $1;
        my $failed = $2 + $3;
        #warn "failed: $failed\n";
        $record->{total_reqs} = $total;
        $record->{failed} = $failed;
        next;
    }
}

warn scalar(@records), " records found.\n";

if ($work_dir =~ m{/$}) {
    chop $work_dir;
}

my $begin_suffix = $records[0]{BEGIN}{suffix};
my $end_suffix = $records[-1]{BEGIN}{suffix};

warn "$begin_suffix <=> $end_suffix\n";

my @nginx_files = sort glob "$work_dir/nginx-*.[0-9]*-[0-9]*";

@nginx_files = grep {
        if (/\.([^.]+)$/) {
            my $s = $1;
            #warn "testing suffix $s\n";
            $s ge $begin_suffix && $s le $end_suffix
        } else {
            die;
        }
    } @nginx_files;

#warn "nginx files: @nginx_files\n";

my @nginx_stats;
my $stat;
for my $file (@nginx_files) {
    if ($file =~ /\.([^.]+)$/) {
        my $suffix = $1;

        open my $in, $file or
            die "Cannot open $file for reading: $!\n";

        while (<$in>) {
            if (/^===$/) {
                if ($stat) {
                    if (!defined $stat->{rss} || !defined $stat->{vsz}
                        || !defined $stat->{cpu} || !defined $stat->{free}
                        || !defined $stat->{idle} || !defined $stat->{cs})
                    {
                        warn "WARNING: Data missing for Nginx stats\n";
                        pop @nginx_stats;
                    }
                }

                $stat = {};
                push @nginx_stats, $stat;

                next;
            }

            if (!$stat) {
                next;
            }

            if (/^TIME (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})$/) {
                my $time = $1;

                #warn "time: $time\n";
                $stat->{time} = $time;
                next;
            }

            if (/^\S+ \s+ \d+ \s+ (\d+(?:\.\d+)?) \s+ \d+(?:\.\d+)? \s+
                    (\d+) \s+ (\d+) \s+ .*? nginx:\ worker\ process /x)
            {
                my ($cpu, $vsz, $rss) = ($1, $2, $3);
                #warn "CPU: $cpu, VSZ: $vsz, RSS: $rss\n";
                $stat->{cpu} = $cpu;
                $stat->{vsz} = $vsz;
                $stat->{rss} = $rss;
                next;
            }

            if (/^\-\/\+ buffers\/cache:\s+\d+\s+(\d+)/) {
                my $free = $1;
                #warn "free: $free\n";
                $stat->{free} = $free;
                next;
            }

            if (/^\s* \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ (\d+) \s+ \d+ \s+ \d+ \s+ (\d+) \s+ \d+ \s+ \d+ \s*$/x) {
                my $cs = $1;
                my $idle = $2;
                #warn "context switch: $cs, idle time: $idle\n";
                $stat->{cs} = $cs;
                $stat->{idle} = $idle;
                next;
            }
        }

        close $in;
        #warn "suffix: $suffix";

    } else {
        die;
    }
}

my @mysql_files = sort glob "$work_dir/mysql-*.[0-9]*-[0-9]*";

@mysql_files = grep {
        if (/\.([^.]+)$/) {
            my $s = $1;
            #warn "testing suffix $s\n";
            $s ge $begin_suffix && $s le $end_suffix
        } else {
            die;
        }
    } @mysql_files;

#warn "mysql files: @mysql_files\n";

undef $stat;
my @mysql_stats;
for my $file (@mysql_files) {
    if ($file =~ /\.([^.]+)$/) {
        my $suffix = $1;

        open my $in, $file or
            die "Cannot open $file for reading: $!\n";

        while (<$in>) {
            if (/^===$/) {
                if ($stat) {
                    if (!defined $stat->{rss} || !defined $stat->{vsz}
                        || !defined $stat->{cpu} || !defined $stat->{threads}
                        || !defined $stat->{idle} || !defined $stat->{cs})
                    {
                        #warn "WARNING: Data missing for MySQL stats\n";
                        #pop @mysql_stats;
                    }
                }

                $stat = {};
                push @mysql_stats, $stat;

                next;
            }

            if (!$stat) {
                next;
            }

            if (/^TIME (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})$/) {
                my $time = $1;

                #warn "time: $time\n";
                $stat->{time} = $time;
                next;
            }

            if (/^\S+ \s+ \d+ \s+ (\d+(?:\.\d+)?) \s+ \d+(?:\.\d+)? \s+
                    (\d+) \s+ (\d+) \s+ .*? \/mysqld \s+ --/x)
            {
                my ($cpu, $vsz, $rss) = ($1, $2, $3);
                #warn "CPU: $cpu, VSZ: $vsz, RSS: $rss\n";
                $stat->{cpu} = $cpu;
                $stat->{vsz} = $vsz;
                $stat->{rss} = $rss;
                next;
            }

            if (/^(\d+)$/) {
                my $threads = $1;
                #warn "threads: $threads\n";
                $stat->{threads} = $threads;
                next;
            }

            if (/^\s* \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ \d+ \s+ (\d+) \s+ \d+ \s+ \d+ \s+ (\d+) \s+ \d+ \s+ \d+ \s*$/x) {
                my $cs = $1;
                my $idle = $2;
                #warn "context switch: $cs, idle time: $idle\n";
                $stat->{cs} = $cs;
                $stat->{idle} = $idle;
                next;
            }
        }

        close $in;
        #warn "suffix: $suffix";

    } else {
        die;
    }
}

sub max {
    my ($a, $b) = @_;
    if (!defined $a) {
        return $b;
    }

    if (!defined $b) {
        return $a;
    }

    return $a > $b ? $a : $b;
}

sub min {
    my ($a, $b) = @_;
    if (!defined $a) {
        return $b;
    }

    if (!defined $b) {
        return $a;
    }

    return $a < $b ? $a : $b;
}

for my $r (@records) {
    my $begin = $r->{BEGIN}{time};
    my $end = $r->{END}{time};

    #warn "begin $begin, end $end\n";
    for my $stat (@nginx_stats) {
        if ($stat->{time} le $begin) {
            next;
        }

        if ($stat->{time} ge $end) {
            last;
        }

        $r->{ngx_rss} = max($r->{ngx_rss}, $stat->{rss}/1000);
        $r->{ngx_vsz} = max($r->{ngx_vsz}, $stat->{vsz}/1000);
        $r->{ngx_cpu} = max($r->{ngx_cpu}, $stat->{cpu});
        $r->{ngx_free} = min($r->{ngx_free}, $stat->{free});
        $r->{ngx_idle} = min($r->{ngx_idle}, $stat->{idle});
        $r->{ngx_cs} = max($r->{ngx_cs}, $stat->{cs});
    }

    for my $stat (@mysql_stats) {
        if ($stat->{time} le $begin) {
            next;
        }

        if ($stat->{time} ge $end) {
            last;
        }

        $r->{mysql_rss} = max($r->{mysql_rss}, $stat->{rss}/1000);
        $r->{mysql_vsz} = max($r->{mysql_vsz}, $stat->{vsz}/1000);
        $r->{mysql_cpu} = max($r->{mysql_cpu}, $stat->{cpu});
        $r->{mysql_threads} = max($r->{mysql_threads}, $stat->{threads});
        $r->{mysql_idle} = min($r->{mysql_idle}, $stat->{idle});
        $r->{mysql_cs} = max($r->{mysql_cs}, $stat->{cs});
    }
}

print "concurrency,rps,time,throughput,nginx_idle,nginx_cs,nginx_free,nginx_cpu,nginx_vsz,nginx_rss,mysql_cpu,mysql_vsz,mysql_rss,mysql_threads,mysql_idle,mysql_cs\n";
for my $r (@records) {
    if ($r->{failed}) {
        warn "WARNING: record skipped: concurrency $r->{con}: $r->{failed} failed.\n";
        next;
    }

    my $begin = $r->{BEGIN};
    my $end = $r->{END};

    if ($r->{total_reqs} == 0) {
        next;
    }

    my $time = $r->{total_time} / $r->{total_reqs} * $r->{con};

    print "$r->{con},$r->{rps},$time,$r->{throughput},",
        "$r->{ngx_idle},$r->{ngx_cs},",
        "$r->{ngx_free},$r->{ngx_cpu},$r->{ngx_vsz},$r->{ngx_rss},",
        "$r->{mysql_cpu},$r->{mysql_vsz},$r->{mysql_rss},$r->{mysql_threads},",
        "$r->{mysql_idle},$r->{mysql_cs}\n";
}

