#!/usr/bin/env perl

use strict;
use warnings;

my $work_dir = shift or
    die "no working directory specified";

my $main_log_file = shift or
    die "no main log file specified";

open my $main, $main_log_file or
    die "failed to open $main_log_file for reading: $!\n";

my @records;
my $record;
my $expect;
while (<$main>) {
    if (/^===$/) {
        $expect = 'time';
        $record = { line => $. };
        push @records, $record;
        last;
    }
}

if (!$record) {
    die "No log data found";
}

while (<$main>) {
    if (/^===$/) {
        if ($record) {
            my $ln = $record->{line};

            if (!$record->{BEGIN}) {
                die "line $ln: BEGIN time not found";
            }

            if (!$record->{END}) {
                die "line $ln: END time not found";
            }

            if (!$record->{con}) {
                die "line $ln: concurrency not found";
            }

            if (!defined $record->{failed}) {
                die "line $ln: failed requests not found";
            }

            if (!defined $record->{rps}) {
                die "line $ln: rps not found";
            }

            if (!defined $record->{band}) {
                die "line $ln: bandwidth not found";
            }
        }

        $record = {};
        push @records, $record;
        next;
    }

    if (/^(BEGIN|END) (\d{4}-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2}))$/) {
        my ($type, $time, $month, $day, $h, $m, $s) = ($1, $2, $3, $4, $5, $6, $7);

        if ($record->{$type}) {
            die "duplicate $type timestamp: $.";
        }

        my $tm = {};
        $record->{$type} = $tm;

        my $suffix = "$month$day-$h$m";
        $tm->{suffix} = $suffix;
        #warn "type $type, suffix $suffix, time $time, sec $s\n";

        $tm->{sec} = $s;
        $tm->{time} = $time;
        next;
    }

    if (/^spawning thread \#\d+: (\d+) concurrent requests/) {
        my ($con) = $1;
        $record->{con} += $con;
        #warn "found concurrency: $con\n";
        next;
    }

    if (/^finished in .*?, (\d+) req\/s, (\d+) kbyte\/s$/) {
        my ($rps, $band) = ($1, $2);
        $record->{rps} = $rps;
        $record->{band} = $band;
        #warn "rps: $rps, bandwidth: $band\n";
        next;
    }

    if (/^requests: .*?, (\d+) failed, (\d+) errored$/) {
        my $failed = $1 + $2;
        #warn "failed: $failed\n";
        $record->{failed} = $failed;
        next;
    }
}

warn scalar(@records), " records found.\n";


